options{  JDK_VERSION = "1.8";  static = false;}PARSER_BEGIN(Parser)package calculator;import java.math.BigDecimal;public class Parser{}PARSER_END(Parser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN :{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >| < REMAINDER : "%" >}TOKEN :{  < CONSTANT :    (< DIGIT >)+    (      "." (< DIGIT >)+    )? >| < #DIGIT : [ "0"-"9" ] >}BigDecimal expr() :{  BigDecimal a, b;  Operator op;}{  a = term()  (    (      < PLUS >      {        op = Operator.add;      }    | < MINUS >      {        op = Operator.subtract;      }    )    b = term()    {      a = op.apply(a, b);    }  )*  {    return a;  }}BigDecimal term() :{  BigDecimal a, b;  Operator op;}{  a = unary()  (    (      < MULTIPLY >      {        op = Operator.multiply;      }    | < DIVIDE >      {        op = Operator.divide;      }    | < REMAINDER >      {        op = Operator.remainder;      }    )    b = unary()    {      a = op.apply(a, b);    }  )*  {    return a;  }}BigDecimal unary() :{  BigDecimal num;}{  < MINUS > num = element()  {    return num.negate();  }| num = element()  {    return num;  }}BigDecimal element() :{  BigDecimal a;}{  < CONSTANT >  {    return new BigDecimal(token.image);  }| "(" a = expr() ")"  {    return a;  }}
